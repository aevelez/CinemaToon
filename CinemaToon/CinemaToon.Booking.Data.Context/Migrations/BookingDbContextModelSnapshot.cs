// <auto-generated />
using System;
using CinemaToon.Booking.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CinemaToon.Booking.Data.Context.Migrations
{
    [DbContext(typeof(BookingDbContext))]
    partial class BookingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CinemaToon.Entities.CinemaBooking.CinemaFunction", b =>
                {
                    b.Property<int>("CinemaFuctionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvailableSeats");

                    b.Property<double>("BasePrice");

                    b.Property<DateTime>("FunctionDateTime");

                    b.Property<int>("MovieId");

                    b.HasKey("CinemaFuctionId");

                    b.ToTable("CinemaBooking");
                });

            modelBuilder.Entity("CinemaToon.Entities.CinemaBooking.CinemaReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CinemaFunctionId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("OriginalMovieTitle");

                    b.Property<double>("TotalPaid");

                    b.Property<int>("TotalTickets");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.HasIndex("CinemaFunctionId");

                    b.ToTable("CinemaReservations");
                });

            modelBuilder.Entity("CinemaToon.Entities.CinemaBooking.CinemaReservation", b =>
                {
                    b.HasOne("CinemaToon.Entities.CinemaBooking.CinemaFunction", "CinemaFunction")
                        .WithMany()
                        .HasForeignKey("CinemaFunctionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
